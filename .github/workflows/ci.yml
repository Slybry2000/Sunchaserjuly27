name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-lint:
    name: Backend • Lint & Typecheck
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./Backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt', 'requirements-dev.txt', 'pyproject.toml', 'Backend/requirements*.txt') }}
      - name: Install deps
        # Run install from repo root so requirements.txt (if present) is found.
        working-directory: ./
        run: |
          python -m pip install --upgrade pip
          # Install pinned requirements if present
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Prefer editable install with dev extras if available, else editable install
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e .
          fi
      - name: Verify prometheus_client available
        working-directory: ./
        run: |
          python -c "import prometheus_client; print('prometheus_client OK')"
      - name: Ruff
        run: ruff check .
      - name: Mypy
        # Run mypy from the repo root so the `Backend` path resolves correctly
        working-directory: ./
        run: mypy --config-file mypy.ini Backend

  backend-test:
    name: Backend • Tests
    runs-on: ubuntu-24.04
    needs: backend-lint
    defaults:
      run:
        working-directory: ./Backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt', 'requirements-dev.txt', 'pyproject.toml', 'Backend/requirements*.txt') }}
      - name: Install deps
        working-directory: ./
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e .
          fi
      - name: Metrics smoke check (start uvicorn & curl /metrics)
        # Run from Backend dir (job default) so `main:app` imports correctly
        run: |
          # Start uvicorn and capture logs to a file so we can surface them on failure
          python -m uvicorn main:app --host 127.0.0.1 --port 8001 --log-level warning > uvicorn.log 2>&1 & echo $! > uvicorn.pid
          started=false
          # wait up to 10*0.5s for the server to start
          for i in {1..10}; do
            if curl -sSf http://127.0.0.1:8001/metrics >/dev/null 2>&1; then
              echo "metrics endpoint reachable"
              started=true
              break
            fi
            sleep 0.5
          done
          if [ "$started" = "false" ]; then
            echo "ERROR: metrics endpoint not reachable after wait; dumping uvicorn.log:"
            cat uvicorn.log || true
            echo "Killing uvicorn pid: $(cat uvicorn.pid)"
            kill $(cat uvicorn.pid) || true
            exit 1
          fi
          # Success — kill server and continue
          kill $(cat uvicorn.pid) || true
      - name: Verify prometheus_client available
        working-directory: ./
        run: |
          python -c "import prometheus_client; print('prometheus_client OK')"
      - name: Run tests
        run: pytest -q
      - name: Coverage (XML)
        run: pytest --cov=Backend --cov-report=xml
      # - name: Upload coverage to Codecov
      #   run: codecov -f coverage.xml
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      # - name: Supply-chain audit
      #   run: pip-audit

  frontend-analyze:
    name: Frontend • Analyze
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./Frontend
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      - name: Cache pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('Frontend/pubspec.lock') }}
      - name: Get deps
        run: flutter pub get
      - name: Analyze
        run: flutter analyze --no-fatal-infos --no-fatal-warnings

  frontend-test:
    name: Frontend • Tests
    runs-on: ubuntu-24.04
    needs: frontend-analyze
    defaults:
      run:
        working-directory: ./Frontend
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      - name: Cache pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('Frontend/pubspec.lock') }}
      - name: Get deps
        run: flutter pub get
      - name: Run widget/unit tests
        run: flutter test --reporter expanded
